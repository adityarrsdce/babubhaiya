{
  "Database Management Systems": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 501 | CREDIT: 5\n📗 Subject: Database Management Systems (DBMS)\n\n🎯 Objectives:\n- Learn design/implementation of DBMS.\n- Understand physical/logical database designs.\n- Master DML for querying, updating, and managing databases.\n- Cover key DBMS topics: security, concurrency, data warehousing.\n\n📚 Modules:\n1️⃣ **Architecture**: Data Abstraction, DDL, DML, Data Models – ER, relational, network, object-oriented.\n2️⃣ **Relational Languages**: Algebra, Calculus, SQL3, Normal Forms, Query Optimization.\n3️⃣ **Storage**: Indices, B-Trees, Hashing.\n4️⃣ **Transactions**: ACID, Concurrency, Schedulers, Recovery.\n5️⃣ **Security**: Authentication, DAC, MAC, RBAC, SQL Injection.\n6️⃣ **Advanced Topics**: OO databases, Web DBs, Distributed DBs, Data Mining.\n\n📘 Textbooks:\n- Silberschatz, Korth, Sudarshan – *Database System Concepts*\n\n📘 References:\n- Ullman – *Database and Knowledge-Base Systems*\n- Elmasri, Navathe – *Fundamentals of Database Systems*\n- Abiteboul et al. – *Foundations of Databases*\n\n✅ Outcomes:\n- Write and optimize relational queries.\n- Design normalized databases.\n- Execute SQL on MySQL/Oracle/DB2.\n- Evaluate query optimization.\n- Ensure ACID-compliant transactions."
  },
  "Formal Language and Automata Theory": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 502 | CREDIT: 4\n📗 Subject: Formal Language and Automata Theory (FLAT)\n\n🎯 Objectives:\n- Formal notations for languages and machines.\n- Design DFA/NFA, prove regularity, design CFGs.\n- Study Pushdown Automata, Turing Machines, and Computability.\n\n📚 Modules:\n1️⃣ **Regular Languages**: RE, DFA, NFA, Pumping Lemma, Minimization.\n2️⃣ **Context-Free**: CFG, PDA, Chomsky/Greibach normal forms, ambiguity.\n3️⃣ **Context-Sensitive**: CSG, Linear Bounded Automata.\n4️⃣ **Turing Machines**: Decidability, Unrestricted Grammars, TMs as Enumerators.\n5️⃣ **Undecidability**: Rice’s Theorem, Reductions, Church-Turing Thesis.\n\n📘 Textbooks:\n- Hopcroft, Ullman, Motwani – *Automata Theory*\n\n📘 References:\n- Sipser – *Theory of Computation*\n- Lewis & Papadimitriou – *Elements of Computation*\n- Kozen – *Automata & Computability*\n- Martin – *Languages & Computation*\n\n✅ Outcomes:\n- Define formal languages and machines.\n- Design finite automata and CFGs.\n- Identify regular/context-free/undecidable languages.\n- Understand hierarchy of grammars and computability."
  },
  "Artificial Intelligence": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 503 | CREDIT: 3\n📗 Subject: Artificial Intelligence (AI)\n\n🎯 Objectives:\n- Understand AI principles, logic, learning, and applications.\n- Develop AI agents and solve real problems using Python.\n\n📚 Modules:\n1️⃣ **Problem Solving**: Search algorithms – BFS, DFS, A*, AO*, Game Playing, Simulated Annealing.\n2️⃣ **Knowledge & Reasoning**: Propositional & FOL, Bayesian Networks, Planning.\n3️⃣ **Learning**: K-means, Decision Trees, Neural Networks, Deep Learning.\n4️⃣ **Advanced Topics**: NLP, Computer Vision, Robotics, Genetic Algorithms.\n\n📘 Textbooks:\n- Russell & Norvig – *AI: A Modern Approach*\n- Rich, Knight & Nair – *Artificial Intelligence*\n\n📘 References:\n- C. Bishop – *Pattern Recognition*\n- Patterson – *AI & Expert Systems*\n- Haykin – *Neural Networks*\n- Jurafsky & Martin – *Speech and Language Processing*\n\n✅ Outcomes:\n- Build intelligent agents and implement AI algorithms.\n- Solve search and inference problems.\n- Implement learning models and apply to real-world domains."
  },
  "Software Engineering": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 504 | CREDIT: 3\n📗 Subject: Software Engineering\n\n🎯 Objectives:\n- Understand SE principles, SDLC, and project management.\n- Design, develop, test, and maintain quality software systems.\n\n📚 Modules:\n1️⃣ **Introduction**: Software history, myths, SDLC Models (Waterfall, Spiral, Agile, etc.).\n2️⃣ **Requirements**: SRS, Functional/Non-functional needs, Elicitation tools.\n3️⃣ **Design**: Modularization, UML, DFDs, Patterns.\n4️⃣ **Project Management**: Estimation (LOC, FP), COCOMO, Scheduling, Risk.\n5️⃣ **Testing**: Unit to System Testing, BVA, Equivalence Class, Path Testing.\n6️⃣ **Maintenance**: Reengineering, Regression Testing, Configuration Mgmt.\n7️⃣ **Quality**: Reliability, ISO 9000, SEI CMM.\n\n📘 Textbooks:\n- Pressman – *Software Engineering: A Practitioner’s Approach*\n- Rajib Mall – *Fundamentals of Software Engg*\n- Pankaj Jalote – *Concise Introduction to SE*\n\n📘 References:\n- Schulmeyer – *Zero Defect Software*\n- Rumbaugh – *OO Modelling and Design*\n- K.K. Aggarwal – *Software Engineering*\n\n✅ Outcomes:\n- Apply SDLC models appropriately.\n- Gather requirements, write SRS.\n- Design and model systems using UML.\n- Test and maintain reliable, quality software."
  },
   "Professional Skill Development": {
    "type": "text",
    "text": "📘 PAPER CODE: HSMC 501 | CREDIT: 3\n📗 Subject: Professional Skill Development\n\n🎯 Objectives:\n- Develop interpersonal and professional skills.\n- Improve verbal/non-verbal communication and presentation techniques.\n- Prepare for GDs, interviews, and leadership roles.\n\n📚 Modules:\n1️⃣ **Communication Skills**: Public speaking, GDs, body language, presentation.\n2️⃣ **Interpersonal Skills**: Group dynamics, negotiation, leadership, emotional intelligence.\n3️⃣ **Corporate Skills**: Time & stress management, people skills, teamwork, ethics.\n4️⃣ **Professional Preparation**: Resume writing, interviews, presentations, entrepreneurship.\n\n📘 Reference Books:\n- Barun Mitra – *Personality Development and Soft Skills*\n- B.N. Ghosh – *Managing Soft Skills*\n- E. Suresh Kumar – *Communication Skills*\n- Richard Denny – *Communication to Win*\n\n✅ Outcomes:\n- Confidently write resumes and perform in interviews/GDs.\n- Exhibit strong leadership and negotiation skills.\n- Manage time, stress, and teamwork effectively.\n- Practice ethics and entrepreneurship skills."
  },
  "Constitution of India": {
    "type": "text",
    "text": "📘 PAPER CODE: MC 501 | CREDIT: 0 (Mandatory Non-credit Course)\n📗 Subject: Constitution of India – Basic Features & Principles\n\n🎯 Course Insight:\n- Understand the constitutional framework and governance.\n- Explore India’s legal heritage, rights, duties, and federal structure.\n- Learn about judiciary, amendments, emergency provisions.\n\n📚 Topics Covered:\n- Meaning of constitutional law and constitutionalism\n- Historical perspective and key features of the Constitution\n- Fundamental Rights and Duties\n- Directive Principles of State Policy (DPSP)\n- Federalism: Power distribution between Union & States\n- Parliamentary system & powers of the President\n- Constitutional Amendments & their significance\n- Emergency provisions: National, President’s Rule, Financial\n- Local self-government structure\n- Fundamental Rights: Equality, Freedom (Article 19), Life (Article 21)\n\n🧠 Takeaway:\nGrasp India's democratic framework, understand rights and responsibilities, and analyze constitutional mechanisms ensuring justice, liberty, and equality."
  }
}
