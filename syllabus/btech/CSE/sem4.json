{
   "Discrete Mathematics": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 401 | CREDIT: 4\n📗 Subject: Discrete Mathematics\n\n🎯 **Course Objectives:**\n➤ Use mathematically correct terminology and notation.\n➤ Construct correct direct and indirect proofs.\n➤ Use division into cases in a proof.\n➤ Use counter examples.\n➤ Apply logical reasoning to solve a variety of problems.\n\n📚 **Module 1: Sets, Relations, and Functions (6 hrs.)**\n- Operations and Laws of Sets, Cartesian Products, Binary Relation\n- Partial Ordering Relation, Equivalence Relation\n- Image of a Set, Sum and Product of Functions, Bijective functions\n- Inverse and Composite Function, Size of a Set, Finite and Infinite Sets\n- Countable and Uncountable Sets, Cantor's Diagonal Argument, Power Set theorem\n- Schroeder-Bernstein theorem\n\n📌 **Module 2: Principles of Mathematical Induction (8 hrs.)**\n- Well-Ordering Principle, Recursive definition\n- Division Algorithm: Prime Numbers\n- Greatest Common Divisor: Euclidean Algorithm\n- Fundamental Theorem of Arithmetic\n- Basic Counting Techniques: Inclusion-Exclusion, Pigeon-hole Principle, Permutation & Combination\n\n📌 **Module 3: Propositional Logic (8 hrs.)**\n- Syntax, Semantics, Validity, Satisfiability\n- Basic Connectives & Truth Tables, Logical Equivalence (Laws of Logic)\n- Logical Implication, Rules of Inference, Use of Quantifiers\n- Proof Techniques: Forward Proof, Proof by Contradiction, Proof by Contraposition, Proof of Necessity & Sufficiency\n\n📌 **Module 4: Algebraic Structures and Morphism (8 hrs.)**\n- Algebraic Structures with One Binary Operation: Semigroups, Monoids, Groups, Congruence Relation & Quotient Structures, Free & Cyclic Monoids/Groups, Permutation Groups, Substructures, Normal Subgroups\n- Algebraic Structures with Two Binary Operations: Rings, Integral Domain, Fields\n- Boolean Algebra & Boolean Ring: Identities, Duality, Representation of Boolean Function, Disjunctive & Conjunctive Normal Form\n\n📌 **Module 5: Graphs and Trees (10 hrs.)**\n- Graphs & Properties: Degree, Connectivity, Path, Cycle, Sub Graph, Isomorphism\n- Eulerian & Hamiltonian Walks, Graph Coloring, Coloring Maps, Planar Graphs, Coloring Vertices & Edges, List Coloring\n- Perfect Graph: Definition, Properties, Examples\n- Rooted Trees, Trees & Sorting, Weighted Trees & Prefix Codes\n- Biconnected Component & Articulation Points, Shortest Distances\n\n📘 **Suggested Books:**\n1. Kenneth H. Rosen – Discrete Mathematics and its Applications, Tata McGraw-Hill\n2. Susanna S. Epp – Discrete Mathematics with Applications, 4th Edition, Wadsworth Publishing\n3. C.L. Liu & D.P. Mohapatra – Elements of Discrete Mathematics: A Computer Oriented Approach, 3rd Edition, Tata McGraw-Hill\n\n📘 **Suggested Reference Books:**\n1. J.P. Tremblay & R. Manohar – Discrete Mathematical Structures and Its Applications to Computer Science, Tata McGraw-Hill\n2. Norman L. Biggs – Discrete Mathematics, 2nd Edition, Oxford University Press\n3. Seymour Lipschutz & Marc Lipson – Schaum’s Outlines: Discrete Mathematics, Tata McGraw-Hill\n\n✅ **Course Outcomes:**\n➤ Express logic sentences using predicates, quantifiers & logical connectives.\n➤ Solve problems using deductive logic & logical inference.\n➤ Classify algebraic structures of given mathematical problems.\n➤ Evaluate and simplify Boolean functions using Boolean algebra.\n➤ Model problems as graph networks and solve using graph theory techniques."
  },
"Computer Organisation and Architecture": {
    "type": "text",
    "text": "📘 COURSE CODE: N/A | CREDIT: N/A\n📗 Subject: Computer Organisation and Architecture\n\n🎯 **Prerequisite:** Basic Digital Logic and Computer Fundamentals\n\n🎯 **Course Objectives:**\n➤ Understand computer system functioning and underlying principles.\n➤ Learn Instruction Level Architecture and instruction execution.\n➤ Study memory system design and organization.\n➤ Understand I/O device access and interfacing.\n➤ Explore instruction-level parallelism and pipelining.\n➤ Learn basics of microprogramming and CPU control unit design.\n\n📚 **Module 1: Fundamentals of Computer Organization (10 hrs)**\n- Functional Blocks of a Computer: CPU, Memory, Input-Output Subsystems, Control Unit\n- Instruction Set Architecture (ISA): Registers, Instruction Execution Cycle, RTL interpretation, Addressing Modes, Instruction Set\n- Data Representation: Signed numbers, Fixed/Floating point, Character encoding\n- Computer Arithmetic: Adders, Multiplication, Division, Floating-Point Operations\n\n📚 **Module 2: CPU Design, Memory, and I/O Systems (14 hrs)**\n- Introduction to x86 Architecture\n- CPU Control Unit Design: Hardwired & Microprogrammed\n- Memory System Design: Semiconductor Memories, Memory Organization\n- Peripheral Devices and I/O Subsystems: Interfaces, Transfer Methods (Programmed, Interrupt, DMA), Privileged/Non-Privileged Instructions\n- Programs & Processes: Role of interrupts, process state transitions\n- I/O Device Interfaces: SCSI, USB\n\n📚 **Module 3: Pipelining and Parallelism (10 hrs)**\n- Pipelining: Concepts, Throughput & Speedup, Pipeline Hazards (Structural, Data, Control)\n- Parallel Processors: Multicore, Multiprocessors, Concurrent Memory Access, Cache Coherency Protocols (MESI)\n\n📚 **Module 4: Memory Hierarchy (6 hrs)**\n- Memory Organization & Interleaving\n- Hierarchical Memory Concept: Registers, Cache, RAM, Disk\n- Cache Memory: Size vs Block size, Mapping functions (Direct, Fully, Set-associative), Replacement algorithms (LRU, FIFO, Random), Write Policies (Write-Through, Write-Back)\n\n📘 **Suggested Books:**\n1. David A. Patterson & John L. Hennessy – *Computer Organization and Design*, 5th Ed., Elsevier\n2. Carl Hamacher – *Computer Organization and Embedded Systems*, 6th Ed., McGraw Hill\n\n📘 **Reference Books:**\n1. John P. Hayes – *Computer Architecture and Organization*, 3rd Ed.\n2. William Stallings – *Computer Organization and Architecture*, 10th Ed.\n3. Vincent P. Heuring & Harry F. Jordan – *Computer System Design and Architecture*, 2nd Ed.\n\n✅ **Course Outcomes:**\n➤ Explain CPU architecture, instruction execution cycle, and instruction set using RTL.\n➤ Write assembly code for basic arithmetic and I/O operations.\n➤ Illustrate concurrent memory access and cache coherence in parallel processors.\n➤ Design and analyze memory modules for CPU interfacing.\n➤ Evaluate and optimize CPU performance using pipelining and parallelism."
},
"Operating Systems": {
    "type": "text",
    "text": "📘 COURSE CODE: ___ | CREDIT: ___\n📗 Subject: Operating Systems\n\n🎯 **Prerequisite:** Basic Computer Architecture and Programming Knowledge\n\n🎯 **Course Objectives:**\n➤ Learn fundamentals and architecture of operating systems.\n➤ Understand process and thread management, scheduling, and communication.\n➤ Gain knowledge of memory management techniques and virtual memory.\n➤ Study file and disk management, I/O hardware and software.\n➤ Explore deadlocks, concurrency, and synchronization mechanisms.\n➤ Implement basic OS mechanisms.\n\n📚 **Module 1: Introduction (4 hrs)**\n- Concept of OS, generations, types of OS\n- OS services, system calls\n- OS structures: Layered, Monolithic, Microkernel\n- Virtual Machine concept, case study on UNIX & Windows\n\n📚 **Module 2: Processes & Scheduling (10 hrs)**\n- Processes: definition, states, PCB, context switching\n- Threads: types, states, benefits, multithreading\n- Process scheduling: objectives, types of schedulers\n- Scheduling algorithms: FCFS, SJF, RR, Real-Time (RM & EDF)\n\n📚 **Module 3: Inter-process Communication (6 hrs)**\n- Critical section, race conditions, mutual exclusion\n- Hardware/software solutions: strict alternation, Peterson's solution\n- Producer-Consumer problem, semaphores, monitors\n- Message passing, shared memory, classical IPC problems\n\n📚 **Module 4: Deadlocks (4 hrs)**\n- Definition, necessary & sufficient conditions\n- Deadlock prevention, avoidance (Banker's algorithm)\n- Deadlock detection and recovery\n\n📚 **Module 5: Memory Management (9 hrs)**\n- Basic concepts, logical & physical address mapping\n- Contiguous allocation: fixed & variable partitions, fragmentation\n- Paging & segmentation, virtual memory, page replacement algorithms (FIFO, LRU, SC, NRU, Optimal)\n\n📚 **Module 6: File and Disk Management, I/O (9 hrs)**\n- File concepts, types, operations, access methods\n- Directory & file system structures, allocation methods\n- Disk structure & scheduling: FCFS, SSTF, SCAN, C-SCAN\n- I/O hardware & software: device controllers, DMA, interrupt handling, device drivers\n\n📘 **Suggested Books:**\n1. Operating System Concepts Essentials, 9th Edition – Silberschatz, Galvin, Gagne (Wiley)\n2. Operating Systems: Internals and Design Principles, 5th Edition – William Stallings\n3. Operating Systems: Design and Implementation, 3rd Edition – Andrew S. Tanenbaum\n\n📘 **Reference Books:**\n1. Modern Operating Systems, 4th Edition – Andrew S. Tanenbaum\n2. Operating System: A Design-oriented Approach – Charles Crowley\n3. Operating Systems: A Modern Perspective – Gary J. Nutt\n4. Design of the Unix Operating Systems – Maurice Bach\n5. Understanding the Linux Kernel – Daniel P. Bovet, Marco Cesati\n\n✅ **Course Outcomes:**\n➤ Understand and implement process scheduling algorithms.\n➤ Apply memory management techniques for optimal memory utilization.\n➤ Develop file management systems.\n➤ Perform I/O management and synchronization between CPU and I/O devices."
},
"Design and Analysis of Algorithms": {
    "type": "text",
    "text": "📘 PAPER CODE: PCC CS 404 | CREDIT: 5\n📗 Subject: Design and Analysis of Algorithms\n\n🎯 **Prerequisite:** Programming for Problem Solving\n\n🎯 **Course Objectives:**\n➤ Analyze the asymptotic performance of algorithms.\n➤ Write rigorous correctness proofs for algorithms.\n➤ Demonstrate familiarity with major algorithms and data structures.\n➤ Apply important algorithmic design paradigms and analysis methods.\n➤ Synthesize efficient algorithms for engineering problems.\n\n📚 **Module 1: Fundamentals (10 hrs.)**\n🔹 *Part 1: Computer Structure & Data Representation*\n- Functional blocks of a computer:\n  - CPU (Central Processing Unit)\n  - Memory\n  - Input-output subsystems\n  - Control Unit\n- Instruction Set Architecture (ISA) of a CPU:\n  - Registers\n  - Instruction execution cycle\n  - RTL (Register Transfer Level) interpretation of instructions\n  - Addressing modes\n  - Instruction set\n- Case study: Instruction sets of some common CPUs\n- Data representation:\n  - Signed number representation\n  - Fixed and floating point representations\n  - Character representation\n\n🔹 *Part 2: Computer Arithmetic*\n- Integer addition and subtraction\n- Ripple carry adder\n- Carry look-ahead adder\n- Multiplication:\n  - Shift-and-add multiplier\n  - Booth multiplier\n  - Carry save multiplier\n- Division:\n  - Restoring division technique\n  - Non-restoring division technique\n- Floating point arithmetic\n\n📌 **Module 2: CPU and I/O Design (14 hrs.)**\n🔹 *Part 1: Architecture and Control*\n- Introduction to x86 architecture\n- CPU control unit design:\n  - Hardwired design approach\n  - Micro-programmed design approach\n- Case study: Design of a simple hypothetical CPU\n\n🔹 *Part 2: Memory and I/O Systems*\n- Memory system design:\n  - Semiconductor memory technologies\n  - Memory organization\n- Peripheral devices and their characteristics\n- Input-output subsystems\n- I/O device interface\n- I/O transfer methods:\n  - Program controlled I/O\n  - Interrupt driven I/O\n  - DMA (Direct Memory Access)\n- Privileged and non-privileged instructions\n- Software interrupts and exceptions\n- Programs and processes: Role of interrupts in process state transitions\n- I/O device interfaces:\n  - SCSI (Small Computer System Interface)\n  - USB (Universal Serial Bus)\n\n📌 **Module 3: Pipelining and Parallelism (10 hrs.)**\n- Pipelining:\n  - Basic concepts of pipelining\n  - Throughput and speedup\n  - Pipeline hazards (Structural, Data, Control)\n- Parallel Processors:\n  - Introduction to parallel processors\n  - Concurrent access to memory\n  - Cache coherency protocols\n\n📌 **Module 4: Memory Hierarchy (6 hrs.)**\n- Memory organization\n- Memory interleaving\n- Concept of hierarchical memory organization\n- Cache Memory:\n  - Cache size vs. Block size\n  - Mapping functions (Direct, Associative, Set-Associative)\n  - Replacement algorithms (e.g., LRU, FIFO)\n  - Write policies (Write-through vs. Write-back).\n\n📘 **Suggested Books:**\n1. Introduction to Algorithms – Cormen, Leiserson, Rivest, Stein (MIT Press/McGraw-Hill, 4th Ed.)\n2. Fundamentals of Computer Algorithms – Horowitz & Sahani (Galgotia)\n3. Computer Algorithms: Introduction to Design & Analysis – Basse (Addison Wesley)\n\n📘 **Reference Books:**\n1. Algorithm Design – Jon Kleinberg and Éva Tardos (Pearson)\n2. Algorithm Design: Foundations, Analysis, and Internet Examples – Goodrich & Tamassia (Wiley)\n3. Algorithms—A Creative Approach – Udi Manber (Addison-Wesley)\n\n✅ **Course Outcomes:**\n➤ Analyze worst-case run-time of algorithms via asymptotic analysis and prove correctness.\n➤ Describe and develop greedy algorithms when applicable.\n➤ Apply divide-and-conquer paradigm and solve recurrence relations.\n➤ Formulate and implement dynamic programming algorithms and analyze their complexity.\n➤ Model engineering problems using graphs and implement graph algorithms.\n➤ Analyze randomized algorithms (expected time, probability of error).\n➤ Explain and compute approximation factors for approximation algorithms (PTAS, FPTAS)."
  },
"Digital Electronics": {
    "type": "text",
    "text": "📘 Subject: Digital Electronics\n\n🎯 **Course Outcomes:**\n1. Understand working of logic families and logic gates.\n2. Design and implement combinational and sequential logic circuits.\n3. Understand the process of analog-to-digital and digital-to-analog conversion.\n4. Use programmable logic devices to implement logical problems.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 (7 hrs)**\n- Digital signals, logic gates: AND, OR, NOT, NAND, NOR, XOR\n- Boolean algebra, number systems: binary, octal, hexadecimal\n- Binary arithmetic, 1’s & 2’s complement\n- Codes: error detection and correction\n- Logic families: TTL, Schottky TTL, CMOS\n- Interfacing CMOS & TTL, tri-state logic\n\n📌 **Module 2 (7 hrs)**\n- Combinational circuits: K-map simplification, minimization\n- Multiplexers, DeMultiplexers, Encoders, Decoders\n- Adders, subtractors, BCD arithmetic, serial & carry-look-ahead adder\n- ALU basics, comparators, parity checkers, code converters\n- Display decoders/drivers, Q-M method\n\n📌 **Module 3 (7 hrs)**\n- Sequential circuits: Latch, Flip-Flops (SR, JK, D, T)\n- Applications: shift registers, ring counters, serial/parallel converters\n- Counters: ripple, synchronous, asynchronous, sequence generator\n- Design using flip-flops, special counter ICs\n\n📌 **Module 4 (7 hrs)**\n- D/A Converters: Weighted resistor, R-2R ladder, DAC specifications\n- A/D Converters: Comparator, Successive Approximation, Dual Slope\n- Voltage-frequency and voltage-time conversion techniques\n- Sample-and-hold circuits, A/D converter IC examples\n\n📌 **Module 5 (7 hrs)**\n- Memories: RAM, ROM, CAM, CCD\n- Memory classification, expansion techniques\n- PLDs: ROM as PLD, PLA, PAL\n- CPLD and FPGA overview\n\n📘 **Suggested Books:**\n1. R. P. Jain, *Modern Digital Electronics*, McGraw Hill\n2. M. M. Mano, *Digital Logic and Computer Design*, Pearson\n3. A. Kumar, *Fundamentals of Digital Circuits*, PHI"
  },
"Human Resource Development and Organizational Behavior": {
    "type": "text",
    "text": "📘 Subject: Human Resource Development and Organizational Behavior\n\n📚 **Module-wise Details:**\n\n📌 **Module 1 (8 hrs)**\n- Introduction to HR: Role, Functions, Significance\n- Changing role of HR managers in a global environment\n- Human Resource Planning (HRP): Planning at various levels\n- Job Analysis process\n\n📌 **Module 2 (8 hrs)**\n- Recruitment & Selection: Sources, Processes\n- Restructuring strategies, Placement, Induction\n- Employee Retention techniques\n- Training & Development: Need for upskilling, Retraining, Redeployment\n- Training methods, Performance Appraisal Systems\n\n📌 **Module 3 (8 hrs)**\n- Performance Management Systems: Definition, Ethics, Appraisal Methods\n- Rating Errors, Competency Management\n- Industrial Relations: Factors, State Interventions, Legal Framework\n- Role of Trade Unions, Collective Bargaining, Worker Participation in Management\n\n📌 **Module 4 (8 hrs)**\n- Organizational Behavior (OB): Definition, Importance, Concepts\n- Challenges & Opportunities in OB\n- Personality & Attitudes: Determinants, Development, Job Satisfaction\n\n📌 **Module 5 (8 hrs)**\n- Leadership: Definition, Importance, Leadership Theories\n- Organizational Politics: Definition, Contributing Factors\n- Conflict Management: Traditional vs Modern Views\n- Functional/Dysfunctional Conflict, Conflict Process\n- Negotiation: Bargaining Strategies and Process\n\n📘 **Suggested Books:**\n1. Gary Dessler, *Human Resource Management*, Pearson Education\n2. Robbins, S. P., Judge & T. A., *Organizational Behavior*, Pearson\n\n📙 **Suggested Reference Books:**\n1. Decenzo & Robbins, *Personnel Human Resource Management*, John Wiley & Sons\n2. Biswajeet Patanayak, *Human Resource Management*, PHI\n3. Luis R. Gomez, Mejia et al., *Managing Human Resources*, PHI\n4. Luthans, Fred, *Organizational Behavior*, McGraw Hill\n5. Shukla, Madhukar, *Understanding Organizations*, PHI"
  },
"Environmental Science": {
  "type": "text",
  "text": "📘 Subject: Environmental Science\n\n🌍 **Overview:**\nHumans are not separate from the environment but are integral to it. Ancient Vedic wisdom emphasizes environmental balance and sustainability. This course uses **activity-based learning** to create awareness and promote real-life environmental responsibility among students.\n\n🔹 **Course Focus:**\n- Understanding mutual influence between human actions and the environment\n- Applying traditional wisdom in a modern context\n\n🧠 **(a) Awareness Activities:**\n1. Group meetings on:\n   - Water conservation\n   - Recycling promotion\n   - Waste reduction\n   - Electricity saving\n2. Slogan making competition\n3. Poster making competition\n4. Cycle rally\n5. Guest lectures by environmental experts\n\n🌿 **(b) Actual Activities:**\n1. Plantation drives\n2. Gifting a tree and observing its growth\n3. Campus cleanliness drives\n4. Waste segregation activities\n5. Living with an environmentalist for experiential learning\n6. Working in a mess kitchen garden\n7. Learning about plant varieties\n8. Campus-wide shutdown of fans and ACs for an hour\n\n✅ **Course Outcome:**\n- Build environmental sensitivity\n- Apply sustainability principles in daily life\n- Understand the impact of human actions on ecological systems"
}
}





