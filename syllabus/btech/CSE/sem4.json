{
    "Discrete Mathematics": {
  "type": "text",
  "text": "📘 Subject: Discrete Mathematics\n📗 Course Code: N/A (Not provided)\n🧮 Credits: N/A (Not provided)\n\n🎯 **Course Objectives:**\n1️⃣ Use mathematically correct terminology and notation.\n2️⃣ Construct correct direct and indirect proofs.\n3️⃣ Apply division into cases and use of counterexamples in proofs.\n4️⃣ Apply logical reasoning to solve mathematical problems.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 – Sets, Relations and Functions (6 hrs)**\n- Set operations and laws\n- Cartesian products\n- Binary, partial ordering, and equivalence relations\n- Images, composite and inverse functions\n- Finite/infinite, countable/uncountable sets\n- Cantor's diagonal argument, Power Set theorem, Schroeder-Bernstein theorem\n\n📌 **Module 2 – Mathematical Induction and Number Theory (8 hrs)**\n- Well-ordering principle\n- Recursive definitions\n- Division algorithm and prime numbers\n- Euclidean algorithm and GCD\n- Fundamental Theorem of Arithmetic\n- Inclusion-exclusion principle\n- Pigeonhole principle, permutation and combination\n\n📌 **Module 3 – Propositional Logic and Proof Techniques (8 hrs)**\n- Syntax, semantics, truth tables\n- Logical equivalence, implication, quantifiers\n- Proof strategies: forward, contradiction, contraposition\n- Proofs of necessity and sufficiency\n\n📌 **Module 4 – Algebraic Structures and Boolean Algebra (8 hrs)**\n- Semigroups, monoids, groups\n- Congruence relations, quotient structures\n- Cyclic groups, permutation groups, normal subgroups\n- Rings, integral domains, fields\n- Boolean algebra, duality, disjunctive/conjunctive normal form\n\n📌 **Module 5 – Graphs and Trees (10 hrs)**\n- Graph properties: degree, path, cycle, connectivity\n- Subgraphs, isomorphism, Eulerian and Hamiltonian paths\n- Graph coloring (vertices, edges, planar graphs)\n- Perfect graphs, rooted trees, sorting with trees\n- Weighted trees, prefix codes\n- Biconnected components, articulation points, shortest path algorithms\n\n📘 **Suggested Books:**\n1. Kenneth H. Rosen – *Discrete Mathematics and its Applications*, Tata McGraw-Hill\n2. Susanna S. Epp – *Discrete Mathematics with Applications*, 4th Edition\n3. C. L. Liu & D. P. Mohapatra – *Elements of Discrete Mathematics*, 3rd Edition, TMH\n\n📘 **Reference Books:**\n1. J. P. Tremblay & R. Manohar – *Discrete Mathematical Structures*, TMH\n2. Norman L. Biggs – *Discrete Mathematics*, 2nd Edition, Oxford\n3. Seymour Lipschutz – *Discrete Mathematics*, Schaum's Outline, TMH\n\n🎓 **Course Outcomes:**\n1️⃣ Translate logical statements using predicates, quantifiers, and connectives.\n2️⃣ Use deductive logic and inference rules for problem-solving.\n3️⃣ Classify algebraic structures for mathematical problems.\n4️⃣ Evaluate and simplify Boolean expressions.\n5️⃣ Model and solve problems using graph theory techniques."
},
"Computer Organisation and Architecture": {
  "type": "text",
  "text": "📘 Subject: Computer Organisation and Architecture\n📗 Course Code: N/A (Not provided)\n🧮 Credits: N/A (Not provided)\n\n🎯 **Course Objectives:**\n1️⃣ Understand how computer systems function and the underlying principles.\n2️⃣ Learn about Instruction Level Architecture and instruction execution.\n3️⃣ Understand memory system design and organization.\n4️⃣ Study principles of I/O device access and interfacing.\n5️⃣ Gain knowledge of Instruction Level Parallelism and pipelining techniques.\n6️⃣ Learn basics of microprogramming and CPU control unit design.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 – Basics and Arithmetic (10 hrs)**\n- Functional blocks of computer: CPU, memory, I/O, control unit\n- Instruction set architecture: registers, execution cycle, RTL, addressing modes\n- Data representation: signed numbers, fixed/floating point, characters\n- Arithmetic: addition, subtraction, Booth’s multiplier, division (restoring & non-restoring), floating-point operations\n\n📌 **Module 2 – Architecture and I/O (14 hrs)**\n- x86 architecture overview\n- CPU control unit: hardwired and microprogrammed designs\n- Memory: technologies and organization\n- I/O subsystems: program-controlled, interrupt-driven, DMA\n- Privileged/non-privileged instructions, software interrupts\n- Processes, interrupts, interfaces: USB, SCSI\n\n📌 **Module 3 – Pipelining & Parallel Processing (10 hrs)**\n- Basics of pipelining, speedup, hazards\n- Parallel processors: introduction, memory access and cache coherence\n\n📌 **Module 4 – Memory Organization (6 hrs)**\n- Memory interleaving, hierarchical memory\n- Cache memory: size vs block size, mapping, replacement, write policies\n\n📘 **Suggested Books:**\n1. David A. Patterson & John L. Hennessy – *Computer Organization and Design*, 5th Ed., Elsevier\n2. Carl Hamacher – *Computer Organization and Embedded Systems*, 6th Ed., McGraw Hill\n\n📘 **Reference Books:**\n1. John P. Hayes – *Computer Architecture and Organization*, 3rd Ed.\n2. William Stallings – *Computer Organization and Architecture*, 10th Ed.\n3. Vincent P. Heuring & Harry F. Jordan – *Computer System Design and Architecture*, 2nd Ed.\n\n🎓 **Course Outcomes:**\n1️⃣ Explain CPU architecture, instruction execution cycle, and instruction set using RTL.\n2️⃣ Write assembly language for 16-bit multiplication, division, and basic I/O interfacing.\n3️⃣ Illustrate concurrent memory access and cache coherence in parallel processors.\n4️⃣ Design and analyze memory modules for CPU interfacing.\n5️⃣ Evaluate and optimize CPU performance using pipelining, parallelism, and RISC."
},
"Operating Systems": {
  "type": "text",
  "text": "📘 Subject: Operating Systems\n\n🎯 **Course Objectives:**\n1. Understand the fundamentals of operating systems.\n2. Learn process and thread handling mechanisms and inter-process communication.\n3. Understand memory management techniques in modern operating systems.\n4. Gain insight into distributed OS concepts: architecture, mutual exclusion, deadlock detection, and agreement protocols.\n5. Learn concurrency management components and techniques.\n6. Implement basic OS mechanisms.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 (4 hrs)**\n- Introduction to Operating Systems\n- Generations and Types of Operating Systems\n- OS Services and System Calls\n- OS Structures: Layered, Monolithic, Microkernel\n- Concept of Virtual Machines\n- Case Studies: UNIX and WINDOWS"
},
"Design and Analysis of Algorithm": {
  "type": "text",
  "text": "📘 Subject: Design and Analysis of Algorithm (DAA)\n\n🎯 **Course Objectives:**\n1. Analyze the asymptotic performance of algorithms.\n2. Write rigorous correctness proofs for algorithms.\n3. Demonstrate familiarity with major algorithms and data structures.\n4. Apply algorithmic design paradigms and analysis methods.\n5. Synthesize efficient algorithms for common engineering scenarios.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 (10 hrs)**\n- Characteristics and performance measures of algorithms\n- Asymptotic analysis: Best, average, worst cases\n- Time-space trade-offs\n- Recurrence relations: Substitution, Recursion tree, Master's theorem\n\n📌 **Module 2 (10 hrs)**\n- Divide and Conquer: Binary Search, Merge Sort, Quick Sort\n- Linear time selection\n- Strassen’s Matrix Multiplication, Karatsuba Multiplication\n- Heap: Min/Max Heap, Build Heap, Heap Sort\n\n📌 **Module 3 (10 hrs)**\n- Paradigms: Brute-force, Greedy, Dynamic Programming, Branch and Bound, Backtracking\n- Greedy examples: MST, Knapsack, Job Sequencing, Huffman Coding, Dijkstra’s Algorithm\n- Dynamic Programming: Fibonacci, Matrix Chain Multiplication, LCS, TSP, Rod Cutting, Bin Packing\n\n📌 **Module 4 (8 hrs)**\n- Graph and Tree Algorithms\n- DFS, BFS, Bellman-Ford, Dijkstra (heap-based), Floyd-Warshall\n- Transitive closure, Topological sorting\n- Network Flow, Connected Components\n\n📌 **Module 5 (5 hrs)**\n- Tractable vs Intractable Problems\n- Classes: P, NP, NP-Complete, NP-Hard\n- Cook’s Theorem, NP-Completeness, Reduction\n- Approximation Algorithms, Randomized Algorithms\n\n📘 **Suggested Books:**\n1. Introduction to Algorithms – Cormen et al.\n2. Fundamentals of Computer Algorithms – Horowitz & Sahni\n3. Computer Algorithms – Basse\n\n📘 **Reference Books:**\n1. Algorithm Design – Kleinberg & Tardos\n2. Algorithm Design – Goodrich & Tamassia\n3. Algorithms: A Creative Approach – Udi Manber\n\n🏁 **Course Outcomes:**\n1. Analyze and prove algorithm correctness using asymptotic notations.\n2. Apply and develop greedy algorithms.\n3. Apply and synthesize divide-and-conquer strategies.\n4. Design and analyze dynamic programming solutions.\n5. Model and solve problems using graph algorithms.\n6. Analyze and interpret randomized algorithm behavior.\n7. Understand approximation algorithms and compute approximation factors."
},
"Digital Electronics": {
  "type": "text",
  "text": "📘 Subject: Digital Electronics\n\n🎯 **Course Outcomes:**\n1. Understand working of logic families and logic gates.\n2. Design and implement combinational and sequential logic circuits.\n3. Understand the process of analog-to-digital and digital-to-analog conversion.\n4. Use programmable logic devices to implement logical problems.\n\n📚 **Detailed Modules:**\n\n📌 **Module 1 (7 hrs)**\n- Digital signals, logic gates: AND, OR, NOT, NAND, NOR, XOR\n- Boolean algebra, number systems: binary, octal, hexadecimal\n- Binary arithmetic, 1’s & 2’s complement\n- Codes: error detection and correction\n- Logic families: TTL, Schottky TTL, CMOS\n- Interfacing CMOS & TTL, tri-state logic\n\n📌 **Module 2 (7 hrs)**\n- Combinational circuits: K-map simplification, minimization\n- Multiplexers, DeMultiplexers, Encoders, Decoders\n- Adders, subtractors, BCD arithmetic, serial & carry-look-ahead adder\n- ALU basics, comparators, parity checkers, code converters\n- Display decoders/drivers, Q-M method\n\n📌 **Module 3 (7 hrs)**\n- Sequential circuits: Latch, Flip-Flops (SR, JK, D, T)\n- Applications: shift registers, ring counters, serial/parallel converters\n- Counters: ripple, synchronous, asynchronous, sequence generator\n- Design using flip-flops, special counter ICs\n\n📌 **Module 4 (7 hrs)**\n- D/A Converters: Weighted resistor, R-2R ladder, DAC specifications\n- A/D Converters: Comparator, Successive Approximation, Dual Slope\n- Voltage-frequency and voltage-time conversion techniques\n- Sample-and-hold circuits, A/D converter IC examples\n\n📌 **Module 5 (7 hrs)**\n- Memories: RAM, ROM, CAM, CCD\n- Memory classification, expansion techniques\n- PLDs: ROM as PLD, PLA, PAL\n- CPLD and FPGA overview\n\n📘 **Suggested Books:**\n1. R. P. Jain, *Modern Digital Electronics*, McGraw Hill\n2. M. M. Mano, *Digital Logic and Computer Design*, Pearson\n3. A. Kumar, *Fundamentals of Digital Circuits*, PHI"
},
"Human Resource Development and Organizational Behavior": {
  "type": "text",
  "text": "📘 Subject: Human Resource Development and Organizational Behavior\n\n📚 **Module-wise Details:**\n\n📌 **Module 1 (8 hrs)**\n- Introduction to HR: Role, Functions, Significance\n- Changing role of HR managers in a global environment\n- Human Resource Planning (HRP): Planning at various levels\n- Job Analysis process\n\n📌 **Module 2 (8 hrs)**\n- Recruitment & Selection: Sources, Processes\n- Restructuring strategies, Placement, Induction\n- Employee Retention techniques\n- Training & Development: Need for upskilling, Retraining, Redeployment\n- Training methods, Performance Appraisal Systems\n\n📌 **Module 3 (8 hrs)**\n- Performance Management Systems: Definition, Ethics, Appraisal Methods\n- Rating Errors, Competency Management\n- Industrial Relations: Factors, State Interventions, Legal Framework\n- Role of Trade Unions, Collective Bargaining, Worker Participation in Management\n\n📌 **Module 4 (8 hrs)**\n- Organizational Behavior (OB): Definition, Importance, Concepts\n- Challenges & Opportunities in OB\n- Personality & Attitudes: Determinants, Development, Job Satisfaction\n\n📌 **Module 5 (8 hrs)**\n- Leadership: Definition, Importance, Leadership Theories\n- Organizational Politics: Definition, Contributing Factors\n- Conflict Management: Traditional vs Modern Views\n- Functional/Dysfunctional Conflict, Conflict Process\n- Negotiation: Bargaining Strategies and Process\n\n📘 **Suggested Books:**\n1. Gary Dessler, *Human Resource Management*, Pearson Education\n2. Robbins, S. P., Judge & T. A., *Organizational Behavior*, Pearson\n\n📙 **Suggested Reference Books:**\n1. Decenzo & Robbins, *Personnel Human Resource Management*, John Wiley & Sons\n2. Biswajeet Patanayak, *Human Resource Management*, PHI\n3. Luis R. Gomez, Mejia et al., *Managing Human Resources*, PHI\n4. Luthans, Fred, *Organizational Behavior*, McGraw Hill\n5. Shukla, Madhukar, *Understanding Organizations*, PHI"
},
"Environmental Science": {
  "type": "text",
  "text": "📘 Subject: Environmental Science\n\n🌍 **Overview:**\nHumans are not separate from the environment but are integral to it. Ancient Vedic wisdom emphasizes environmental balance and sustainability. This course uses **activity-based learning** to create awareness and promote real-life environmental responsibility among students.\n\n🔹 **Course Focus:**\n- Understanding mutual influence between human actions and the environment\n- Applying traditional wisdom in a modern context\n\n🧠 **(a) Awareness Activities:**\n1. Group meetings on:\n   - Water conservation\n   - Recycling promotion\n   - Waste reduction\n   - Electricity saving\n2. Slogan making competition\n3. Poster making competition\n4. Cycle rally\n5. Guest lectures by environmental experts\n\n🌿 **(b) Actual Activities:**\n1. Plantation drives\n2. Gifting a tree and observing its growth\n3. Campus cleanliness drives\n4. Waste segregation activities\n5. Living with an environmentalist for experiential learning\n6. Working in a mess kitchen garden\n7. Learning about plant varieties\n8. Campus-wide shutdown of fans and ACs for an hour\n\n✅ **Course Outcome:**\n- Build environmental sensitivity\n- Apply sustainability principles in daily life\n- Understand the impact of human actions on ecological systems"
}


}